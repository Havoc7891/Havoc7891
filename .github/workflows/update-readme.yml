name: Update README

on:
  schedule:
    - cron: "0 22 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Generate README Content
        id: generate
        run: |
          python scripts/update-readme.py > updated-readme.md

      - name: Upload README via GitHub API
        env:
          GHTOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          FILE="README.md"
          COMMITMESSAGE="Update README"

          LOCALCONTENT=$(base64 -w 0 updated-readme.md)

          REMOTECONTENT=$(curl -s \
            -H "Authorization: token $GHTOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            https://api.github.com/repos/$REPO/contents/$FILE)

          REMOTEBASE64=$(echo "$REMOTECONTENT" | base64 -w 0)

          if [ "$LOCALCONTENT" = "$REMOTEBASE64" ]; then
            echo "README up to date."
            exit 0
          fi

          SHA=$(curl -s \
            -H "Authorization: token $GHTOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/contents/$FILE \
            | jq -r .sha)

          echo "{
            \"message\": \"$COMMITMESSAGE\",
            \"content\": \"$LOCALCONTENT\",
            \"sha\": \"$SHA\",
            \"branch\": \"$BRANCH\"
          }" | curl -X PUT \
            -H "Authorization: token $GHTOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/contents/$FILE \
            -d @-

  cleanup-cache:
    runs-on: ubuntu-latest
    needs: update-readme
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete caches >= 3 days old
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          echo "Fetching caches for $REPO..."
          cutoff=$(date -d "-3 days" +%s)
          cutoff_readable=$(date -d "@$cutoff" --iso-8601=seconds)
          echo "Cutoff timestamp: $cutoff ($cutoff_readable)"
          echo "Deleting caches last accessed on or before: $cutoff_readable"
          echo ""

          caches=$(gh api --paginate "repos/$REPO/actions/caches" --jq '.actions_caches[]')

          if [ -z "$caches" ]; then
            echo "No caches found."
            exit 0
          fi

          deleted=0
          kept=0

          while IFS= read -r cache; do
            id=$(echo "$cache" | jq -r '.id')
            last_accessed=$(echo "$cache" | jq -r '.last_accessed_at')
            ts=$(date -d "$last_accessed" +%s)
            age_seconds=$(( $(date +%s) - ts ))
            age_days=$(( age_seconds / 86400 ))
            age_hours=$(( (age_seconds % 86400) / 3600 ))

            if [ "$ts" -le "$cutoff" ]; then
              echo "Deleting cache id $id (last accessed $last_accessed, ${age_days}d ${age_hours}h old)"
              if gh api --method DELETE "repos/$REPO/actions/caches/$id"; then
                deleted=$((deleted + 1))
              else
                echo "Failed to delete cache $id"
              fi
            else
              echo "Keeping cache id $id (last accessed $last_accessed, ${age_days}d ${age_hours}h old)"
              kept=$((kept + 1))
            fi
          done < <(echo "$caches" | jq -c '.')

          echo ""
          echo "Cache cleanup completed. Deleted: $deleted, Kept: $kept"
